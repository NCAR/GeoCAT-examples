
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/Line/NCL_leg_1.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_Line_NCL_leg_1.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_Line_NCL_leg_1.py:


NCL_leg_1.py
===============
This script illustrates the following concepts:
   - Drawing a legend inside an XY plot
   - Changing the width and height of a legend
   - Turning off the perimeter around a legend
   - Changing the font size of legend labels
   - Customizing the labels in a legend

See following URLs to see the reproduced NCL plot & script:
    - Original NCL script: https://www.ncl.ucar.edu/Applications/Scripts/leg_1.ncl
    - Original NCL plot: https://www.ncl.ucar.edu/Applications/Images/leg_1_lg.png

.. GENERATED FROM PYTHON SOURCE LINES 17-18

Import packages:

.. GENERATED FROM PYTHON SOURCE LINES 18-25

.. code-block:: default

    import numpy as np
    import xarray as xr
    import matplotlib.pyplot as plt

    import geocat.datafiles as gdf
    from geocat.viz import util as gvutil








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Read in data:

.. GENERATED FROM PYTHON SOURCE LINES 27-34

.. code-block:: default


    # Open a netCDF data file using xarray default engine and load the data into xarrays
    ds = xr.open_dataset(gdf.get("netcdf_files/uv300.nc"))
    # Extract variables
    uz = ds.U.isel(time=0).mean(dim=['lon'])
    vz = ds.V.isel(time=0).mean(dim=['lon'])








.. GENERATED FROM PYTHON SOURCE LINES 35-36

Plot:

.. GENERATED FROM PYTHON SOURCE LINES 36-63

.. code-block:: default


    # Generate figure (set its size (width, height) in inches) and axes
    plt.figure(figsize=(5, 5))
    ax = plt.gca()

    # Plot data and add a legend
    plt.plot(vz.lat, vz.values, '--', dashes=[6.5, 3.7], c='gray', label='V')
    plt.plot(uz.lat, uz.values, c='gray', label='U')
    plt.legend(loc='upper left', frameon=False, prop={'weight': 'bold'})

    # Use geocat.viz.util convenience function to add minor and major tick lines
    gvutil.add_major_minor_ticks(ax,
                                 x_minor_per_major=3,
                                 y_minor_per_major=5,
                                 labelsize=12)

    # Use geocat.viz.util convenience function to set axes parameters without calling several matplotlib functions
    # Set axes limits, tick values, and tick labels to show latitude & longitude (i.e. North (N) - South (S))
    gvutil.set_axes_limits_and_ticks(
        ax,
        xlim=(-90, 90),
        ylim=(-10, 40),
        xticks=np.linspace(-90, 90, 7),
        xticklabels=['90S', '60S', '30S', '0', '30N', '60N', '90N'])

    # Show the plot
    plt.show()



.. image:: /gallery/Line/images/sphx_glr_NCL_leg_1_001.png
    :alt: NCL leg 1
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.130 seconds)


.. _sphx_glr_download_gallery_Line_NCL_leg_1.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: NCL_leg_1.py <NCL_leg_1.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: NCL_leg_1.ipynb <NCL_leg_1.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
