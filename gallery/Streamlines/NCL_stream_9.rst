
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/Streamlines/NCL_stream_9.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_Streamlines_NCL_stream_9.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_Streamlines_NCL_stream_9.py:


NCL_stream_9.py
===============
This script illustrates the following concepts:
   - Defining your own color map
   - Applying a color map to a streamplot
   - Using opacity to emphasize or subdue overlain features

See following URLs to see the reproduced NCL plot & script:
    - Original NCL script: https://www.ncl.ucar.edu/Applications/Scripts/stream_9.ncl
    - Original NCL plot: https://www.ncl.ucar.edu/Applications/Images/stream_9_1_lg.png

.. GENERATED FROM PYTHON SOURCE LINES 16-17

Import packages:

.. GENERATED FROM PYTHON SOURCE LINES 17-30

.. code-block:: default


    import numpy as np
    import xarray as xr
    import cartopy.crs as ccrs
    import cartopy.feature as cfeature
    import matplotlib.cm as cm
    import matplotlib.pyplot as plt
    import matplotlib.colors as colors
    import matplotlib.colors as mcolors

    import geocat.datafiles as gdf
    from geocat.viz import util as gvutil








.. GENERATED FROM PYTHON SOURCE LINES 31-32

Make color map

.. GENERATED FROM PYTHON SOURCE LINES 32-42

.. code-block:: default


    colormap = colors.ListedColormap([
        'darkblue', 'mediumblue', 'blue', 'cornflowerblue', 'skyblue', 'aquamarine',
        'lime', 'greenyellow', 'gold', 'orange', 'orangered', 'red', 'maroon'
    ])

    colorbounds = np.arange(0, 56, 4)

    norm = mcolors.BoundaryNorm(colorbounds, colormap.N)








.. GENERATED FROM PYTHON SOURCE LINES 43-44

Read in data:

.. GENERATED FROM PYTHON SOURCE LINES 44-49

.. code-block:: default


    # Open a netCDF data file using xarray default engine and load the data into xarrays
    ds1 = xr.open_dataset(gdf.get('netcdf_files/U500storm.cdf'))
    ds2 = xr.open_dataset(gdf.get('netcdf_files/V500storm.cdf'))








.. GENERATED FROM PYTHON SOURCE LINES 50-51

Plot:

.. GENERATED FROM PYTHON SOURCE LINES 51-117

.. code-block:: default


    # Set figure
    fig = plt.figure(figsize=(10, 10))

    # Create first subplot on figure for map
    ax = fig.add_axes([.1, .2, .8, .6],
                      projection=ccrs.LambertAzimuthalEqualArea(
                          central_longitude=-100, central_latitude=40),
                      frameon=False,
                      aspect='auto')

    # Set axis projection
    ax.set_extent([-128, -58, 18, 65], crs=ccrs.PlateCarree())

    # Add ocean, lakes, land features, and coastlines to map
    ax.add_feature(cfeature.OCEAN, color='lightblue')
    ax.add_feature(cfeature.LAKES, color='white', edgecolor='black')
    ax.add_feature(cfeature.LAND, color='tan')
    ax.coastlines()

    # Extract streamline data from initial timestep
    U = ds1.u.isel(timestep=0)
    V = ds2.v.isel(timestep=0)

    # Calculate magnitude data
    magnitude = np.sqrt(np.square(U.data) + np.square(V.data))

    # Plot streamline data
    streams = ax.streamplot(U.lon,
                            U.lat,
                            U.data,
                            V.data,
                            transform=ccrs.PlateCarree(),
                            arrowstyle='->',
                            linewidth=1,
                            density=2.0,
                            color=magnitude,
                            cmap=colormap)

    # Set streamlines and arrows to partially transparent
    streams.lines.set_alpha(.5)
    streams.arrows.set_alpha(.5)

    # Create second subplot on figure for colorbar
    ax2 = fig.add_axes([.1, .1, .8, .05])

    # Set title of plot
    # Make title font bold using r"$\bf{_______}$" formatting
    gvutil.set_titles_and_labels(ax,
                                 maintitle=r"$\bf{Assigning}$" + " " +
                                 r"$\bf{color}$" + " " + r"$\bf{palette}$" + " " +
                                 r"$\bf{to}$" + " " + r"$\bf{streamlines}$",
                                 maintitlefontsize=25)

    # Plot colorbar on subplot
    cb = fig.colorbar(cm.ScalarMappable(cmap=colormap, norm=norm),
                      cax=ax2,
                      boundaries=colorbounds,
                      ticks=np.arange(4, 52, 4),
                      spacing='uniform',
                      orientation='horizontal')

    # Change size of colorbar tick font
    ax2.tick_params(labelsize=20)

    plt.show()



.. image:: /gallery/Streamlines/images/sphx_glr_NCL_stream_9_001.png
    :alt: $\bf{Assigning}$ $\bf{color}$ $\bf{palette}$ $\bf{to}$ $\bf{streamlines}$
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/anissaz/opt/anaconda3/envs/geocat-examples/lib/python3.7/site-packages/cartopy/vector_transform.py:140: RuntimeWarning: invalid value encountered in cos
      u, v = target_proj.transform_vectors(src_crs, x, y, u, v)
    /Users/anissaz/opt/anaconda3/envs/geocat-examples/lib/python3.7/site-packages/cartopy/vector_transform.py:140: RuntimeWarning: invalid value encountered in sin
      u, v = target_proj.transform_vectors(src_crs, x, y, u, v)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.877 seconds)


.. _sphx_glr_download_gallery_Streamlines_NCL_stream_9.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: NCL_stream_9.py <NCL_stream_9.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: NCL_stream_9.ipynb <NCL_stream_9.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
